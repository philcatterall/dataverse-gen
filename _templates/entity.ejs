/* eslint-disable*/
<%_ if (generateEntityTypes){ _%>
import { <%-referencedTypes["Entity"].name%> } from "<%-referencedTypes["Entity"].import%>";
<%_}_%>
<%_ if (generateFormContext){ _%>

// Entity <%- locals.SchemaName %> FormContext
export interface <%- SchemaName %>FormContext extends Xrm.FormContext {
    getAttribute(): Xrm.Attributes.Attribute[];
    getAttribute<T extends Xrm.Attributes.Attribute>(attributeName: string): T;
    getAttribute(attributeName: string): Xrm.Attributes.Attribute;
    getAttribute(index: number): Xrm.Attributes.Attribute;

    getControl(): Xrm.Controls.Control[];
    getControl<T extends Xrm.Controls.Control>(controlName: string): T;
    getControl(controlName: string): Xrm.Controls.Control;
    getControl(index: number): Xrm.Controls.Control;

<%locals.Properties && locals.Properties.forEach(function(property){ if(!property.AttributeOf && (property.SourceType === 0 || property.Type === "LookupType")  && property.TypescriptType.name !== 'Guid' && property.TypescriptType.definitelyTypedAttributeType) { _%>
    /*
    <%- property.Description %>
    */
    getAttribute(name: '<%- property.Name %>'): <%-property.TypescriptType.definitelyTypedAttributeType%>;
    /*
    <%- property.Description %>
    */
    getControl(name: '<%- property.Name %>'): <%-property.TypescriptType.definitelyTypedControlType%>;
<%}})_%>
}
<%_}_%>
// Entity <%- locals.SchemaName %>
export const <%- Name %>Metadata = {
  typeName: "mscrm.<%- Name %>",
  logicalName: "<%- Name %>",
  collectionName: "<%- EntitySetName %>",
  primaryIdAttribute: "<%- KeyName %>",
  attributeTypes: {
    // Numeric Types
    <%_ Properties.filter(p=>p.TypescriptType.name=="number").forEach(function(attribute){ _%>
    <%-attribute.Name%>: "<%-attribute.Type.replace("Type","")-%>",
    <%_})_%>
    // Optionsets
    <%_ Properties.filter(p=>p.IsEnum).forEach(function(attribute){ _%>
    <%-attribute.Name%>: "<%-attribute.IsMultiSelect ? "MultiSelect" : "Optionset"%>",
    <%_})_%>
    // Date Formats
    <%_ Properties.filter(p=>p.TypescriptType.name == "Date").forEach(function(attribute){ _%>
    <%-attribute.Name%>: "<%-attribute.Format-%>",
    <%_})_%>
  },
  navigation: {
    <%_ NavigationProperties.filter(n=>!n.IsCollection).forEach(function(navProp){ _%>
    <%-navProp.Name%>: [<%-navProp.Type.split(",").map(function(a){return '"' + a + '"'}).join(",")%>],
    <%_})_%>
  },
};

// Attribute constants
export const enum <%- locals.SchemaName %>Attributes {
<%locals.Properties && locals.Properties.forEach(function(property){ _%>
  <%- property.SchemaName %> = "<%- property.Name %>",
<%})_%>
}
<%_ if (generateEntityTypes){ _%>
// Early Bound Interface
export interface <%- locals.SchemaName ? locals.SchemaName : Name %> extends <%-referencedTypes["Entity"].name%> {
<%locals.Properties && locals.Properties.forEach(function(property){ _%>
  /*
  <%- property.DisplayName ? property.DisplayName : "" %><%- property.IsRequired == true ? " [Required]" : "" %><%- property.Type ? (" " + property.Type) : "" %><%- property.Description ? (" " + property.Description) :"" %><%- property.Format ? (" " + property.Format) : "" %>
  */
  <%- property.Name %>?: <%-property.TypescriptType.importLocation && `import("${property.TypescriptType.importLocation}").`%><%- property.TypescriptType.name %><%- property.IsRequired == true ? "" : " | null" %>;
<%})_%>
}
<%_}_%>